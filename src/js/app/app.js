// Generated by CoffeeScript 1.7.1

/*
Handle logins
 */

(function() {
  var widget;

  Ember.User = Ember.Object.extend({
    userId: null,
    token: null,
    name: null,
    nick: null,
    picture: null,
    identities: null,
    init: function() {
      this._super();
      return client.currentUser = {
        userId: this.get("userId"),
        mobileServiceAuthenticationToken: this.get("token")
      };
    },
    baseObj: function() {
      return {
        userId: this.get("userId"),
        token: this.get("token"),
        name: this.get("name"),
        nick: this.get("nick"),
        picture: this.get("picture"),
        identities: this.get("identities")
      };
    }
  });

  if (window.location.hash.match(/^#access_token/)) {
    widget = new Auth0Widget({
      domain: 'appti2ude.auth0.com',
      clientID: '4QBrlEZHS38TjIeyubMXCasvau2bJALW',
      callbackURL: 'http://appti2ude.com/',
      callbackOnLocationHash: true
    });
    widget.parseHash(window.location.hash, function(profile, id_token, access_token, state) {
      return widget.getClient().getDelegationToken("TiM6jLgzB6kRD28zrnoB9XsiIAP9vKme", id_token, {
        scope: "openid"
      }, function(err, delegationResult) {
        App.user = Ember.User.create({
          userId: profile.user_id,
          token: delegationResult.id_token,
          name: profile.name,
          nick: profile.nickname,
          picture: profile.picture,
          identities: profile.identities
        });
        console.log(profile);
        if ((typeof App !== "undefined" && App !== null) && (App.LoginStateManager != null)) {
          App.LoginStateManager.send("login");
          window.location.hash = "#/app/new";
          window.location.hash.substring(1);
        }
        return $.cookie("currentUser", JSON.stringify(App.user.baseObj()));
      });
    });
    window.location.hash = "#/app/new";
    window.location.hash.substring(1);
  }


  /*
    End logins
   */


  /*
    Create the application
   */

  window.App = Ember.Application.create();


  /*
    Temp: todo: Create fixture adapter for testing
   */

  App.ApplicationAdapter = DS.FixtureAdapter.extend();


  /*
    Handles authenticated state
   */

  App.LoginStateManager = Ember.StateManager.create({
    initialState: (function() {
      if (($.cookie("currentUser") != null) && (App.user == null)) {
        App.user = Ember.User.create(JSON.parse($.cookie("currentUser")));
      }
      if (client.currentUser != null) {
        return "Authenticated";
      } else {
        return "NotAuthenticated";
      }
    })(),
    Authenticated: Ember.State.create({
      enter: function() {
        return console.log("enter " + this.name);
      },
      logout: function(manager, context) {
        return manager.transitionTo("NotAuthenticated");
      }
    }),
    NotAuthenticated: Ember.State.create({
      enter: function() {
        return console.log("enter " + this.name);
      },
      login: function(manager, credentials) {
        console.log(credentials);
        return manager.transitionTo("Authenticated");
      }
    })
  });


  /*
    An authenticated controller
   */

  Ember.AuthenticatedController = Ember.Controller.extend({
    authStateBinding: Ember.Binding.oneWay("App.LoginStateManager.currentState.name"),
    authState: null,
    pictureBinding: Ember.Binding.oneWay("App.user.picture"),
    picture: null,
    nickBinding: Ember.Binding.oneWay("App.user.nick"),
    nick: null,
    isAuthenticated: (function() {
      return this.get("authState") === "Authenticated";
    }).property("authState")
  });


  /*
    An authenticated route
   */

  Ember.AuthenticatedRoute = Ember.Route.extend({
    authStateBinding: Ember.Binding.oneWay("App.LoginStateManager.currentState.name"),
    authState: null,
    isAuthenticated: (function() {
      return this.get("authState") === "Authenticated";
    }).property("authState"),
    beforeModel: function() {
      if (!this.get("isAuthenticated")) {
        return this.transitionTo("index");
      }
    }
  });


  /*
    The application controller
   */

  App.ApplicationController = Ember.AuthenticatedController.extend({
    actions: {
      login: function(provider) {
        widget = new Auth0Widget({
          domain: 'appti2ude.auth0.com',
          clientID: '4QBrlEZHS38TjIeyubMXCasvau2bJALW',
          callbackURL: 'http://appti2ude.com/',
          callbackOnLocationHash: true
        });
        return widget.signin();
      },
      logout: function() {
        $.removeCookie("currentUser");
        return App.LoginStateManager.send("logout");
      }
    }
  });

}).call(this);

//# sourceMappingURL=app.map
